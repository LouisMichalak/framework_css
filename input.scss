* {
  box-sizing: border-box;
  font-size: 2vw;
  margin: 0;
  padding: 0;
}
.red {
  background-color: red;
}
.blue {
  background-color: blue;
}
.orange {
  background-color: orange;
}
.container {
  display: block;
  margin: auto;
}
.container-fluid {
  width: 100%;
}
.row {
  background-color: rgba(0, 0, 0, 0.2);
  width: 100%;
  display: flex;
  flex-wrap: wrap;
}
$grid-columns: 12;
$grid-gutter-width: 30px;
$grid-breakpoints: (
        xs: 0,
        sm: 576px,
        md: 768px,
        lg: 992px,
        xl: 1200px
);
$container-max-widths: (
        sm: 540px,
        md: 720px,
        lg: 960px,
        xl: 1140px
);
$color-themes: (
        primary: (back: #007bff,color: #fff),
        secondary: (back: #6c757d,color: #fff),
        success: (back: #28a745,color: #fff),
        danger: (back: #dc3545,color: #fff),
        warning: (back: #ffc107,color: black),
        info: (back: #17a2b8,color: #fff),
        light: (back: #f8f9fa,color: black),
        dark: (back: #343a40,color: #fff)
);
.btn {
  cursor: pointer;
  vertical-align: middle;
  display: flex;
  justify-content: center;
  padding: 6px 12px;
  border-radius: 4px;
  border: 1px solid rgba(255, 255, 255, 0);
  background-color: rgba(0, 0, 0, 0);
}
.btn:focus {
  outline-style: none;
}
.btn-link {
  color: #1384ff;
}
.btn-link:hover {
  text-decoration: underline;
}
@each $name, $color in $color-themes {
  .btn-#{$name} {
    color: map_get($color, color);
    background-color: map_get($color, back);
    transition: 0.2s;
  }
  .btn-#{$name}:hover {
    background-color: darken(map_get($color, back), 10%);
  }
  .btn-#{$name}:focus {
    box-shadow: 0px 0px 0px 4px adjust_color(map_get($color, back), $lightness: 0%, $alpha: -0.3);
  }
  .btn-#{$name}.active {
    box-shadow: inset 0px 0px 15px 1px adjust_color(map_get($color, back), $lightness: -20%, $alpha: -0.3);
    font-weight: bold;
  }
  .btn-#{$name}.disabled {
    background-color: adjust_color(map_get($color, back), $lightness: 30%, $alpha: -0.3);
    box-shadow: none;
    font-weight: lighter;
  }
}
@each $name, $size in $grid-breakpoints {
  @media screen and (min-width: $size) {
    .container {
      width: map_get($container-max-widths, $name);
    }
    @for $count from 1 through $grid-columns {
      @if $name != xs
      {
        .col--#{$name}-#{$count} {
          width: percentage($count / $grid-columns);
          padding-left: $grid-gutter-width / 2;
          padding-right: $grid-gutter-width / 2;
        }
      }
    }
  }
}
@media screen and (min-width: 0) {
  @for $count from 1 through $grid-columns {
    .col-#{$count} {
      width: percentage($count / $grid-columns);
      padding-left: $grid-gutter-width / 2;
      padding-right: $grid-gutter-width / 2;
    }
  }
}